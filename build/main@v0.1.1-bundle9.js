
/*************************** [bundle] ****************************/
// Original file:./examples/webgl-two-function.html
/*****************************************************************/
window.__etcpack__bundleSrc__['44']=function(){
    var __etcpack__scope_bundle__={};
    var __etcpack__scope_args__;
    __etcpack__scope_bundle__.default= "<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <script src=\"https://unpkg.com/image3d@3\"></script>\n\n    <!-- 顶点着色器 -->\n    <script type='x-shader/x-vertex' id='vs'>\n        attribute vec4 a_position;\n        uniform mat4 u_matrix;\n        attribute vec4 a_color;\n        varying vec4 v_color;\n        void main(){\n            gl_Position=u_matrix * a_position;\n            v_color=a_color;\n        }\n    </script>\n\n    <!-- 片段着色器 -->\n    <script type='x-shader/x-fragment' id='fs'>\n        precision mediump float;\n        varying vec4 v_color;\n        void main(){\n            gl_FragColor=v_color;\n        }\n    </script>\n\n</head>\n\n<body>\n\n    <canvas width=500 height=500>非常抱歉，您的浏览器不支持canvas!</canvas>\n\n    <script>\n\n        // 创建3D对象并配置好画布和着色器\n        var image3d = new image3D(document.getElementsByTagName('canvas')[0], {\n            \"vertex-shader\": document.getElementById(\"vs\").innerText,\n            \"fragment-shader\": document.getElementById(\"fs\").innerText,\n            depth: true\n        });\n\n        /**\n         * 许多的点，三个点拼接成一个三角形，\n         * 每个点由6个数据组成，前3个表示点的位置，后3个表示点的颜色\n         * 而一个个三角形拼接成最终的图形\n        */\n        var points = [];\n\n        // 一个根据值来确定颜色的方法\n        var valToColor = function (val) {\n            return [val * 0.5, 0.5, 1 - val * 0.5];\n        }\n\n        var dist = 0.02;\n        var color, val;\n        // y=x2+z2;\n        for (var x = -1; x < 1; x += dist) {\n            for (var z = -1; z <= 1; z += dist) {\n\n                // 左上三角形\n\n                val = x * x + z * z;\n                color = valToColor(val);\n                points.push(x, val, z, color[0], color[1], color[2]);\n\n                val = (x + dist) * (x + dist) + z * z;\n                points.push(x + dist, val, z, color[0], color[1], color[2]);\n\n                val = x * x + (z + dist) * (z + dist);\n                points.push(x, val, z + dist, color[0], color[1], color[2]);\n\n                // 右下三角形\n\n                val = (x + dist) * (x + dist) + z * z;\n                color = valToColor(val);\n                points.push(x + dist, val, z, color[0], color[1], color[2]);\n\n                val = x * x + (z + dist) * (z + dist);\n                points.push(x, val, z + dist, color[0], color[1], color[2]);\n\n                val = (x + dist) * (x + dist) + (z + dist) * (z + dist);\n                points.push(x + dist, val, z + dist, color[0], color[1], color[2]);\n\n            }\n        }\n\n        // 点的个数\n        var num = points.length / 6;\n\n        // 点的坐标\n        image3d.Buffer().write(new Float32Array(points)).use('a_position', 3, 6, 0).use('a_color', 3, 6, 3);\n\n        var painter = image3d.Painter();\n\n        //  创建相机对象\n        var camera = image3d.Camera({\n            size: 2\n        }).rotateBody(0.9, 0, 1, 0).rotateBody(0.3, 1, 0, 0, 0, 0, 1).moveBody(0.5, 0, -1, 0);\n\n        setInterval(function () {\n\n            camera.rotateBody(0.05, 0, 1, 0);\n\n            // 传递照相机\n            image3d.setUniformMatrix(\"u_matrix\",\n                camera.value()\n            );\n\n            // 绘制\n            painter.drawTriangle(0, num);\n\n        }, 30);\n\n    </script>\n\n</body>\n\n</html>"
  
    return __etcpack__scope_bundle__;
}
